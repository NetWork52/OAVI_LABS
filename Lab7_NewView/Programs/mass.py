import os
import csv
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# –ü–∞–ø–∫–∏ –∏ –ø—É—Ç–∏
script_dir = os.path.dirname(os.path.abspath(__file__))
input_folder = os.path.join(script_dir, "../Photo/alphabet")
csv_file = os.path.join(script_dir, "../features.csv")
profiles_folder = os.path.join(script_dir, "../Photo/alphabet_phofs")
profiles_csv_folder = os.path.join(profiles_folder, "csv")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(profiles_folder, exist_ok=True)
os.makedirs(profiles_csv_folder, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
def compute_features(image_path):
    img = Image.open(image_path).convert("L")
    img_np = np.array(img)
    binary = img_np < 128  # True - —á—ë—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å

    if not np.any(binary):
        print(f"‚ö†Ô∏è  –ù–µ—Ç —á—ë—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {image_path}")
        return None

    h, w = binary.shape
    area = h * w

    # –ú–∞—Å—Å–∞ —á–µ—Ç–≤–µ—Ä—Ç–µ–π
    q1 = binary[0:h // 2, 0:w // 2].sum()
    q2 = binary[0:h // 2, w // 2:].sum()
    q3 = binary[h // 2:, 0:w // 2].sum()
    q4 = binary[h // 2:, w // 2:].sum()

    # –£–¥–µ–ª—å–Ω—ã–µ –º–∞—Å—Å—ã
    quarter_area = (h // 2) * (w // 2)
    uq1 = q1 / quarter_area
    uq2 = q2 / quarter_area
    uq3 = q3 / quarter_area
    uq4 = q4 / quarter_area

    # –¶–µ–Ω—Ç—Ä —Ç—è–∂–µ—Å—Ç–∏
    coords = np.argwhere(binary)
    y_coords, x_coords = coords[:, 0], coords[:, 1]
    x_cg = x_coords.mean()
    y_cg = y_coords.mean()

    # –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Ç—è–∂–µ—Å—Ç–∏
    x_cg_norm = x_cg / w
    y_cg_norm = y_cg / h

    # –ú–æ–º–µ–Ω—Ç—ã –∏–Ω–µ—Ä—Ü–∏–∏
    Ix = ((x_coords - x_cg) ** 2).sum()
    Iy = ((y_coords - y_cg) ** 2).sum()
    Ix_norm = Ix / (w ** 2 * binary.sum())
    Iy_norm = Iy / (h ** 2 * binary.sum())

    # –ü—Ä–æ—Ñ–∏–ª–∏
    profile_x = binary.sum(axis=0)
    profile_y = binary.sum(axis=1)

    return [
        q1, q2, q3, q4,
        uq1, uq2, uq3, uq4,
        x_cg, y_cg,
        x_cg_norm, y_cg_norm,
        Ix, Iy,
        Ix_norm, Iy_norm,
        profile_x, profile_y
    ]

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
header = [
    "char", "q1", "q2", "q3", "q4",
    "uq1", "uq2", "uq3", "uq4",
    "x_cg", "y_cg", "x_cg_norm", "y_cg_norm",
    "Ix", "Iy", "Ix_norm", "Iy_norm"
]

# –°–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∑–∞–ø–∏—Å—å CSV
processed = 0
with open(csv_file, "w", newline="", encoding="utf-8") as f:
    writer = csv.writer(f, delimiter=";")
    writer.writerow(header)

    for filename in os.listdir(input_folder):
        if filename.lower().endswith((".png", ".bmp", ".jpg", ".jpeg")):
            char = os.path.splitext(filename)[0]
            path = os.path.join(input_folder, filename)
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {filename}")
            features = compute_features(path)
            if features is None:
                continue

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
            profile_x, profile_y = features[-2], features[-1]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π
            plt.figure(figsize=(4, 2))
            plt.bar(range(len(profile_x)), profile_x)
            plt.title(f"{char} - X –ø—Ä–æ—Ñ–∏–ª—å")
            plt.tight_layout()
            plt.savefig(os.path.join(profiles_folder, f"{char}_x.png"))
            plt.close()

            plt.figure(figsize=(2, 4))
            plt.barh(range(len(profile_y)), profile_y)
            plt.title(f"{char} - Y –ø—Ä–æ—Ñ–∏–ª—å")
            plt.tight_layout()
            plt.savefig(os.path.join(profiles_folder, f"{char}_y.png"))
            plt.close()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ CSV
            with open(os.path.join(profiles_csv_folder, f"{char}_x.csv"), "w", newline="") as xf:
                writer_x = csv.writer(xf)
                writer_x.writerow(["x", "value"])
                for i, val in enumerate(profile_x):
                    writer_x.writerow([i, val])

            with open(os.path.join(profiles_csv_folder, f"{char}_y.csv"), "w", newline="") as yf:
                writer_y = csv.writer(yf)
                writer_y.writerow(["y", "value"])
                for i, val in enumerate(profile_y):
                    writer_y.writerow([i, val])

            # –ó–∞–ø–∏—Å—å –≤ –æ–±—â–∏–π CSV
            writer.writerow([char] + features[:-2])
            processed += 1

print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed}")
